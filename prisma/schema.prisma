// ---------------------------------------
// Datasource & Generator
// ---------------------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------
// Enums
// ---------------------------------------
enum Rol {
  SUPERADMIN
  ADMIN_COLEGIO
  CONDUCTOR
  PADRE
}


// ---------------------------------------
// Models
// ---------------------------------------
model Colegio {
  id           Int          @id @default(autoincrement())
  nombre       String       @unique
  direccion    String?
  lat          Float?
  lon          Float?
  activo       Boolean      @default(true)

  // relaciones
  usuarios     Usuario[]    @relation("ColegioUsuarios")
  estudiantes  Estudiante[]
  buses        Bus[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([activo])
}

model Usuario {
  id            Int       @id @default(autoincrement())
  rol           Rol
  email         String    @unique
  hashPassword  String
  nombre        String
  telefono      String?
  activo        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // N:M con estudiantes (padre ↔ hijos)
  hijos         PadreEstudiante[]

  // Si es ADMIN_COLEGIO o CONDUCTOR puede pertenecer a un colegio; PADRE/SUPERADMIN normalmente null
  colegioId     Int?
  colegio       Colegio?   @relation("ColegioUsuarios", fields: [colegioId], references: [id], onDelete: SetNull)

  // Si es CONDUCTOR: buses a su cargo
  busesConductor Bus[]     @relation("UsuarioConductor")

  @@index([rol, activo])
}

model Estudiante {
  id         Int       @id @default(autoincrement())
  colegioId  Int
  colegio    Colegio   @relation(fields: [colegioId], references: [id], onDelete: Cascade)

  codigo     String
  ci         String?
  nombre     String
  curso      String?
  activo     Boolean   @default(true)

  // Coordenadas del domicilio (para mostrar en el mapa)
  homeLat    Float?
  homeLon    Float?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  padres         PadreEstudiante[]
  buses          EstudianteBus[]

  @@unique([colegioId, codigo])   // único por colegio
  @@index([colegioId, activo])
  @@index([homeLat, homeLon])
}

model PadreEstudiante {
  padreId       Int
  estudianteId  Int

  padre         Usuario    @relation(fields: [padreId], references: [id], onDelete: Cascade)
  estudiante    Estudiante @relation(fields: [estudianteId], references: [id], onDelete: Cascade)

  createdAt     DateTime   @default(now())

  @@id([padreId, estudianteId])
}

model Bus {
  id          Int       @id @default(autoincrement())
  colegioId   Int
  codigo      String    // identificador único del bus dentro del colegio
  nombre      String?   // nombre de la ruta o descripción
  placa       String?   // placa del bus
  conductorId Int?      // usuario con rol CONDUCTOR
  activo      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  colegio     Colegio   @relation(fields: [colegioId], references: [id], onDelete: Cascade)

  // Relación nombrada explícitamente para no chocar con otras relaciones Usuario<->Colegio
  conductor   Usuario?  @relation("UsuarioConductor", fields: [conductorId], references: [id], onDelete: SetNull)

  // Ruta (paradas)
  paradas     Parada[]

  // Estudiantes asignados a este bus (N:M)
  estudiantes EstudianteBus[]

  // Telemetría actual (1:1)
  telemetria  TelemetriaBus?


  @@unique([colegioId, codigo])
  @@index([colegioId, activo])
  @@index([conductorId])
}

model EstudianteBus {
  estudianteId Int
  busId        Int

  estudiante   Estudiante @relation(fields: [estudianteId], references: [id], onDelete: Cascade)
  bus          Bus        @relation(fields: [busId], references: [id], onDelete: Cascade)

  createdAt    DateTime   @default(now())

  @@id([estudianteId, busId])
  @@index([busId])
}

// Paradas ordenadas que definen la ruta del Bus
model Parada {
  id        Int      @id @default(autoincrement())
  busId     Int
  nombre    String?
  orden     Int
  lat       Float
  lon       Float
  activa    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bus       Bus      @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@index([busId, orden])
  @@index([lat, lon])
}

// Última ubicación reportada por el bus (para polling y banner de estado)
model TelemetriaBus {
  busId     Int       @unique
  lat       Float
  lon       Float
  heading   Float?
  updatedAt DateTime  @updatedAt

  bus       Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

